import{_ as a,c as n,a0 as t,o}from"./chunks/framework.DgZgdyI2.js";const u=JSON.parse('{"title":"Frontend of Chat system","description":"","frontmatter":{},"headers":[],"relativePath":"docs/functions/front-dialogue.md","filePath":"docs/functions/front-dialogue.md"}'),s={name:"docs/functions/front-dialogue.md"};function i(r,e,c,d,l,h){return o(),n("div",null,e[0]||(e[0]=[t('<h1 id="frontend-of-chat-system" tabindex="-1">Frontend of Chat system <a class="header-anchor" href="#frontend-of-chat-system" aria-label="Permalink to &quot;Frontend of Chat system&quot;">​</a></h1><p>We created a multi-functional chat system using Streamlit. It features a user interface for managing conversations, enabling users to upload files, interact with AI models, and view historical chat data. Key functions include selecting between local and API models, saving and restoring session states, calling a backend API for responses, and exporting conversation logs. Users can create, delete, and switch between conversations while tracking the chat history. The chat interactions are facilitated through a ChatBox component, and the system is designed to handle various configurations and options for personalized user experience.</p><h2 id="components-and-functionalities" tabindex="-1">Components and functionalities: <a class="header-anchor" href="#components-and-functionalities" aria-label="Permalink to &quot;Components and functionalities:&quot;">​</a></h2><h3 id="imports-and-initialization" tabindex="-1">Imports and Initialization: <a class="header-anchor" href="#imports-and-initialization" aria-label="Permalink to &quot;Imports and Initialization:&quot;">​</a></h3><p>The code imports necessary libraries, including Streamlit and components for chat interaction. A <code>ChatBox</code> is initialized to manage the chat interface.</p><h3 id="model-management" tabindex="-1">Model Management: <a class="header-anchor" href="#model-management" aria-label="Permalink to &quot;Model Management:&quot;">​</a></h3><p>Functions <code>get_local_models()</code> and <code>get_api_models()</code> retrieve lists of local and API-based AI models for users to choose from.</p><h3 id="session-management" tabindex="-1">Session Management: <a class="header-anchor" href="#session-management" aria-label="Permalink to &quot;Session Management:&quot;">​</a></h3><p>Functions <code>save_session()</code> and <code>restore_session()</code> handle saving and restoring the chat context to maintain conversation history across interactions.</p><h3 id="api-interaction" tabindex="-1">API Interaction: <a class="header-anchor" href="#api-interaction" aria-label="Permalink to &quot;API Interaction:&quot;">​</a></h3><p>The <code>call_backend()</code> function sends user prompts to a backend API and returns the AI&#39;s response, handling errors as necessary.</p><h3 id="conversation-history-management" tabindex="-1">Conversation History Management: <a class="header-anchor" href="#conversation-history-management" aria-label="Permalink to &quot;Conversation History Management:&quot;">​</a></h3><p>Functions <code>get_conversation_history()</code> and <code>update_conversation_history()</code> manage and store the dialogue history using Streamlit&#39;s session state.</p><h3 id="user-interface" tabindex="-1">User Interface: <a class="header-anchor" href="#user-interface" aria-label="Permalink to &quot;User Interface:&quot;">​</a></h3><p>The <code>dialogue_page()</code> function defines the layout of the chat interface, including sidebar settings for model selection and conversation management.</p><p>Users can create or delete conversations and view or export chat histories.</p><h3 id="chat-interaction" tabindex="-1">Chat Interaction: <a class="header-anchor" href="#chat-interaction" aria-label="Permalink to &quot;Chat Interaction:&quot;">​</a></h3><p>Users can input messages, and the AI&#39;s responses are processed and displayed, with options for using either local models or API models.</p><p>The interface supports exporting conversations as text files.</p><h3 id="clear-conversations" tabindex="-1">Clear Conversations: <a class="header-anchor" href="#clear-conversations" aria-label="Permalink to &quot;Clear Conversations:&quot;">​</a></h3><p>A function <code>clear_conversation()</code> allows users to reset the current chat history.</p><h3 id="session-control" tabindex="-1">Session Control: <a class="header-anchor" href="#session-control" aria-label="Permalink to &quot;Session Control:&quot;">​</a></h3><p>Functions <code>add_conv()</code> and <code>delete_conv()</code> manage the creation and deletion of chat sessions, ensuring at least one session is retained.</p>',23)]))}const p=a(s,[["render",i]]);export{u as __pageData,p as default};
