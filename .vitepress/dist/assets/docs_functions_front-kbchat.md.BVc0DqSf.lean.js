import{_ as a,c as t,a0 as n,o}from"./chunks/framework.DgZgdyI2.js";const f=JSON.parse('{"title":"Knowledge Base Chat","description":"","frontmatter":{},"headers":[],"relativePath":"docs/functions/front-kbchat.md","filePath":"docs/functions/front-kbchat.md"}'),s={name:"docs/functions/front-kbchat.md"};function i(r,e,c,d,l,h){return o(),t("div",null,e[0]||(e[0]=[n('<h1 id="knowledge-base-chat" tabindex="-1">Knowledge Base Chat <a class="header-anchor" href="#knowledge-base-chat" aria-label="Permalink to &quot;Knowledge Base Chat&quot;">​</a></h1><p>This file implements a Retrieval-Augmented Generation (RAG) dialogue system using the Streamlit framework. The system features a chat interface that allows users to interact with various dialogue modes, such as knowledge base Q&amp;A, file conversations, and search engine queries.</p><h2 id="key-components" tabindex="-1">Key components: <a class="header-anchor" href="#key-components" aria-label="Permalink to &quot;Key components:&quot;">​</a></h2><h3 id="_1-configuration-and-utility-classes" tabindex="-1">1. Configuration and Utility Classes: <a class="header-anchor" href="#_1-configuration-and-utility-classes" aria-label="Permalink to &quot;1. Configuration and Utility Classes:&quot;">​</a></h3><p>The <code>Settings</code> class holds various configuration parameters for the model and tools, including history length, knowledge base settings, and search engine configurations.</p><p>A dummy <code>ApiRequest</code> class contains a placeholder for fetching available knowledge bases, with the <code>list_knowledge_bases()</code> method set to return a static list.</p><br><h3 id="_2-chat-interface-setup" tabindex="-1">2. Chat Interface Setup: <a class="header-anchor" href="#_2-chat-interface-setup" aria-label="Permalink to &quot;2. Chat Interface Setup:&quot;">​</a></h3><p>A <code>ChatBox</code> instance is initialized to manage the user interface for the chat, complete with an avatar.</p><p>The <code>init_widgets()</code> function initializes the session state to keep track of user selections and parameters.</p><br><h3 id="_3-user-interaction" tabindex="-1">3. User Interaction: <a class="header-anchor" href="#_3-user-interaction" aria-label="Permalink to &quot;3. User Interaction:&quot;">​</a></h3><p>The <code>kb_chat()</code> function creates the main UI layout, featuring a sidebar with tabs for RAG configuration and session settings.</p><p>Users can select a dialogue mode, configure settings, and upload files as needed. The chat history is displayed, and users can input messages via a chat box, which are echoed back as simulated AI responses.</p><br><h3 id="_4-export-functionality" tabindex="-1">4. Export Functionality: <a class="header-anchor" href="#_4-export-functionality" aria-label="Permalink to &quot;4. Export Functionality:&quot;">​</a></h3><p>The system includes an option to export the chat history as a markdown file, timestamped for easy identification.</p>',17)]))}const p=a(s,[["render",i]]);export{f as __pageData,p as default};
