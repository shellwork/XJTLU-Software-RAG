import{_ as a,c as t,a0 as n,o}from"./chunks/framework.DgZgdyI2.js";const h=JSON.parse('{"title":"Knowledge Base Management","description":"","frontmatter":{},"headers":[],"relativePath":"docs/functions/create-database.md","filePath":"docs/functions/create-database.md"}'),i={name:"docs/functions/create-database.md"};function s(d,e,r,c,l,m){return o(),t("div",null,e[0]||(e[0]=[n('<h1 id="knowledge-base-management" tabindex="-1">Knowledge Base Management <a class="header-anchor" href="#knowledge-base-management" aria-label="Permalink to &quot;Knowledge Base Management&quot;">​</a></h1><p>The create-database file is part of a knowledge management system that handles document processing and vector embedding for a knowledge base (KB). It uses the <strong>FastAPI</strong> framework to upload, store, and manage documents in various formats (e.g., PDFs, JSON, OCR documents). The knowledge base can also utilize different vector store backends (e.g., <strong>Chroma</strong>) for information retrieval and is capable of batch processing and metadata management.</p><h2 id="key-functionalities" tabindex="-1">Key Functionalities: <a class="header-anchor" href="#key-functionalities" aria-label="Permalink to &quot;Key Functionalities:&quot;">​</a></h2><h3 id="_1-initialization-functions" tabindex="-1">1. Initialization Functions: <a class="header-anchor" href="#_1-initialization-functions" aria-label="Permalink to &quot;1. Initialization Functions:&quot;">​</a></h3><p>· <code>initialize_upload_path()</code>: Sets up the folder structure for storing uploaded documents.</p><p>· <code>initialize_metadata()</code>: Initializes metadata (<code>metadata.json</code>) for a specific knowledge base if it doesn&#39;t exist.</p><br><h3 id="_2-knowledge-base-management" tabindex="-1">2. Knowledge Base Management: <a class="header-anchor" href="#_2-knowledge-base-management" aria-label="Permalink to &quot;2. Knowledge Base Management:&quot;">​</a></h3><p>· <code>create_kb()</code>: Creates a new knowledge base folder, initializes metadata, and configures parameters like embedding model and vector store type.</p><p>· <code>get_kb_list()</code>: Retrieves a list of available knowledge bases and categorizes their documents.</p><p>· <code>get_kb_documents()</code>: Returns a list of documents in a specified knowledge base, along with their sizes, chunking settings, and metadata.</p><p>· <code>delete_kb()</code>: Deletes an entire knowledge base, including its metadata and documents.</p><br><h3 id="_3-document-management" tabindex="-1">3. Document Management: <a class="header-anchor" href="#_3-document-management" aria-label="Permalink to &quot;3. Document Management:&quot;">​</a></h3><p>· <code>save_file_to_category()</code>: Saves uploaded documents into categorized folders within a knowledge base based on file extensions.</p><p>· <code>delete_kb_files()</code>: Deletes specific files from a knowledge base and updates the metadata accordingly.</p><br><h3 id="_4-batch-processing" tabindex="-1">4. Batch Processing: <a class="header-anchor" href="#_4-batch-processing" aria-label="Permalink to &quot;4. Batch Processing:&quot;">​</a></h3><p><code>process_batches()</code>: Handles batch processing of documents by splitting, vectorizing, and storing them in the vector store. It also assigns default parameters to files that haven’t been processed in a batch.</p><br><h3 id="_5-vector-store-operations" tabindex="-1">5. Vector Store Operations: <a class="header-anchor" href="#_5-vector-store-operations" aria-label="Permalink to &quot;5. Vector Store Operations:&quot;">​</a></h3><p>· <code>generate_data_store()</code>: This function handles the core document processing workflow, including text splitting, vectorization, and embedding model processing (e.g., using Chroma). It also supports special processing of JSON and OCR documents.</p><p>· <code>delete_existing_chroma()</code>: Deletes the existing Chroma vector database when needed.</p><br><h3 id="_6-metadata-handling" tabindex="-1">6. Metadata Handling: <a class="header-anchor" href="#_6-metadata-handling" aria-label="Permalink to &quot;6. Metadata Handling:&quot;">​</a></h3><p>· <code>read_kb_metadata()</code>: Reads the metadata file (<code>metadata.json</code>) for a specified knowledge base. If it doesn’t exist, it initializes the file.</p><p>· <code>update_kb_metadata()</code>: Updates metadata, especially for batch-related information.</p>',27)]))}const p=a(i,[["render",s]]);export{h as __pageData,p as default};
