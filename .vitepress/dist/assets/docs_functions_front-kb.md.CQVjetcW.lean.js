import{_ as t,c as a,a0 as o,o as n}from"./chunks/framework.DgZgdyI2.js";const p=JSON.parse('{"title":"Frontend design of Knowledgebase management","description":"","frontmatter":{},"headers":[],"relativePath":"docs/functions/front-kb.md","filePath":"docs/functions/front-kb.md"}'),s={name:"docs/functions/front-kb.md"};function i(d,e,l,r,c,h){return n(),a("div",null,e[0]||(e[0]=[o('<h1 id="frontend-design-of-knowledgebase-management" tabindex="-1">Frontend design of Knowledgebase management <a class="header-anchor" href="#frontend-design-of-knowledgebase-management" aria-label="Permalink to &quot;Frontend design of Knowledgebase management&quot;">​</a></h1><p>This file is a Streamlit application for managing a knowledge base, featuring multiple functionalities such as displaying knowledge bases, uploading files, and creating new knowledge bases.</p><h2 id="key-components" tabindex="-1">Key components: <a class="header-anchor" href="#key-components" aria-label="Permalink to &quot;Key components:&quot;">​</a></h2><h3 id="_1-basic-setup" tabindex="-1">1. Basic Setup: <a class="header-anchor" href="#_1-basic-setup" aria-label="Permalink to &quot;1. Basic Setup:&quot;">​</a></h3><p>The application imports <code>streamlit</code> for building the user interface, <code>pandas</code> for handling tabular data, <code>AgGrid</code> for displaying documents in the knowledge base, and <code>requests</code> for communicating with the backend API.</p><p><code>UPLOAD_DIR</code> is defined as the directory for file uploads, ensuring its existence through the <code>Path</code> module.</p><h3 id="_2-knowledge-base-page-display-and-selection" tabindex="-1">2. Knowledge Base Page Display and Selection: <a class="header-anchor" href="#_2-knowledge-base-page-display-and-selection" aria-label="Permalink to &quot;2. Knowledge Base Page Display and Selection:&quot;">​</a></h3><p>Initially, it fetches the current list of knowledge bases via an API request (<code>requests.get(&quot;http://localhost:8000/get_kb_list&quot;</code>)) and stores it in <code>kb_list</code> for user selection.</p><p>Users can choose from existing knowledge bases or select &quot;Create New Knowledge Base&quot; to set up a new one.</p><h3 id="_3-creating-a-new-knowledge-base" tabindex="-1">3. Creating a New Knowledge Base: <a class="header-anchor" href="#_3-creating-a-new-knowledge-base" aria-label="Permalink to &quot;3. Creating a New Knowledge Base:&quot;">​</a></h3><p>If the user selects &quot;Create New Knowledge Base,&quot; a form is presented to enter the knowledge base name, description, vector store type (<code>vs_type</code>), and embedding model (<code>embed_model</code>).</p><p>Upon submission, a POST request (<code>requests.post</code>) is sent to the backend to create the knowledge base, and the page refreshes upon successful creation.</p><h3 id="_4-displaying-knowledge-base-information" tabindex="-1">4. Displaying Knowledge Base Information: <a class="header-anchor" href="#_4-displaying-knowledge-base-information" aria-label="Permalink to &quot;4. Displaying Knowledge Base Information:&quot;">​</a></h3><p>Once a knowledge base is selected, its detailed information is displayed, including the description and a list of existing documents.</p><p>The document list is retrieved via an API request (<code>requests.get(&quot;http://localhost:8000/get_kb_documents?kb_name={selected_kb}&quot;)</code>) and presented in a table format using <code>AgGrid</code>.</p><h3 id="_5-file-upload-and-processing" tabindex="-1">5. File Upload and Processing: <a class="header-anchor" href="#_5-file-upload-and-processing" aria-label="Permalink to &quot;5. File Upload and Processing:&quot;">​</a></h3><p>Users can upload multiple files using <code>st.file_uploader</code>, along with configuring processing parameters such as maximum segment length, text overlap, and whether to enhance Chinese titles.</p><p>After uploading, files and processing configurations are sent to the backend via a POST request (<code>requests.post(&quot;http://localhost:8000/upload_files&quot;)</code>) to add them to the knowledge base.</p><h3 id="_6-file-deletion" tabindex="-1">6. File Deletion: <a class="header-anchor" href="#_6-file-deletion" aria-label="Permalink to &quot;6. File Deletion:&quot;">​</a></h3><p>By selecting documents in the table, users can perform bulk deletion. The selected files are sent to the backend via a POST request to complete the deletion operation (<code>requests.post(&quot;http://localhost:8000/delete_kb_files&quot;)</code>).</p><h3 id="_7-rebuilding-the-vector-store" tabindex="-1">7. Rebuilding the Vector Store: <a class="header-anchor" href="#_7-rebuilding-the-vector-store" aria-label="Permalink to &quot;7. Rebuilding the Vector Store:&quot;">​</a></h3><p>Users have the option to rebuild the knowledge base&#39;s vector store, which is done by sending an API request (<code>requests.post(f&quot;http://localhost:8000/rebuild_vector_store&quot;)</code>) to update or reconstruct the vector store.</p><h3 id="_8-deleting-the-entire-knowledge-base" tabindex="-1">8. Deleting the Entire Knowledge Base: <a class="header-anchor" href="#_8-deleting-the-entire-knowledge-base" aria-label="Permalink to &quot;8. Deleting the Entire Knowledge Base:&quot;">​</a></h3><p>Users can delete the entire knowledge base after confirming the action. The application sends a request to the backend to delete the knowledge base (<code>requests.post(&quot;http://localhost:8000/delete_kb&quot;)</code>).</p>',24)]))}const g=t(s,[["render",i]]);export{p as __pageData,g as default};
